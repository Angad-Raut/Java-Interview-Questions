{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang2057{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\b\f0\fs28\lang9 Java 8 Interview Questions and Answers\b0\fs22\par
\par
\b Q.1 What is Java 8?\b0\par
    - Java 8 is a major release of the Java programming language \par
      that majorly changed the old style of programming by introducing several new features, \par
      such as, lambda expressions, functional interfaces, and streams. \par
\par
\b Q.2 What is a lambda expression?\b0\par
    - A lambda expression is a short way to express a function in Java. \par
      It allows us to write a function inline and pass it as an argument to another function as well.\par
\par
\b Q.3 What is a functional interface?\b0\par
    - A functional interface is an interface that contains exactly one abstract method. \par
      It is used to represent a single function contract.\par
\par
\b Q.4 What is a stream in Java 8?\b0\par
    - A stream is a sequence of elements that can be processed parallel or sequentially. \par
      Streams are a new addition to Java 8 and provide an easy way to work with collections.\par
\par
\b Q.5 What are the benefits of using streams?\b0\par
    - Streams provide a more concise and demonstrative way to work with collections. \par
      They also enable parallel processing of collections, which can lead to improved performance.\par
\par
\b Q.6 What is the difference between a parallel stream and a sequential stream in Java 8?\b0\par
    - A parallel stream allows for processing elements concurrently using multiple threads,\par
      while a sequential stream processes elements one-by-one in a single thread. \par
      To create a parallel stream, you can call the parallel() method on a stream.\par
\par
\b Q.7 What is the difference between a stream and a collection in Java 8?\b0\par
    - A stream is a sequence of elements that can be processed in parallel or sequentially,\par
      while a collection is a data structure that stores a group of elements. \par
      Additionally, Streams provide an easy way to work with Collections.\par
\par
\b Q.8 What are the common terminal operations on streams?\b0\par
    - Some common terminal operations on streams include forEach(), \par
      reduce(), collect(), min(), max(), findFirst(), findAny() and count() etc.\par
\par
\b Q.9 What is the difference between a terminal operation and an intermediate operation in a stream?\b0\par
    - An intermediate operation on a stream returns a new stream, \par
      while a terminal operation consumes the stream and produces a result.\par
\par
\b Q.10 What is the difference between a functional interface and a normal interface in Java 8?\b0\par
    - A functional interface contains only one abstract method, \par
      while a normal interface can contain any number of abstract methods.\par
\par
\b Q.11 What is a default method in Java 8?\b0\par
    - A default method is a method with the \lquote default\rquote  keyword that is defined in an interface and has a default implementation. \par
      It can be overridden by an implementing class if needed.\par
\par
\b Q.12 What is a static method in Java 8?\b0\par
    - A static method is a method with the \lquote static\rquote  keyword that is defined in a class \par
      and can be called without creating an instance of the class.\par
\b\par
Q.13 What is the syntax for a lambda expression in Java 8?\par
\b0      - The syntax for a lambda expression in Java 8 is:\par
       (parameter list) -> expression\par
\par
\b Q.14 What is the difference between a lambda expression and an anonymous inner class in Java 8?\b0\par
     - A lambda expression is a concise way to express a function,\par
       while an anonymous inner class is a way to create a class without giving it a name.\par
\par
\b Q.15 What is a method reference in Java 8?\b0\par
     - A method reference is a shorthand way to write a lambda expression that calls a method.\par
        Method references can be used to simplify code and improve readability by eliminating the need for a separate lambda expression.\par
        For example, instead of using \ldblquote x -> Math.sqrt(x)\rdblquote , we can use \ldblquote Math::sqrt\rdblquote  as a method reference.\par
\par
\b Q.16 What are the predefined functional interfaces in Java 8?\b0\par
     - Some common predefined functional interfaces in Java 8 include Function, Predicate, Consumer, and Supplier.\par
\par
\b Q.17 What is the Function interface in Java 8?\b0\par
     - The Function interface in Java 8 is a functional interface that takes an argument and returns a result.\par
\par
\b Q.18 What is the Predicate interface in Java 8?\b0\par
     - The Predicate interface in Java 8 is a functional interface that takes an argument and returns a Boolean result.\par
\par
\b Q.19 What is the Consumer interface in Java 8?\b0\par
     - The Consumer interface in Java 8 is a functional interface that takes an argument and returns no result.\par
\par
\b Q.20 What is the Supplier interface in Java 8?\b0\par
     - The Supplier interface in Java 8 is a functional interface that takes no argument and returns a result of a specified type.\par
\par
\b Q.21 What is the Optional class in Java 8?\b0\par
     - The Optional class in Java 8 is a container object that may or may not contain a value. It is used to avoid null pointer exceptions.\par
\par
\b Q.22 What is a CompletableFuture in Java 8?\b0\par
     - A CompletableFuture in Java 8 is a class that represents a task that will be completed in the future. \par
       It can be used for asynchronous programming.\par
\par
\b Q.23 What is the @FunctionalInterface annotation in Java 8?\b0\par
     - The @FunctionalInterface annotation in Java 8 is used to indicate that an interface is a functional interface.\par
\par
\b Q.24 What is the use of the map() method in Java 8 streams?\b0\par
     - The map() method in Java 8 streams is used to transform each element in a stream into a new element.\par
\b\par
Q.25 What is the use of the filter() method in Java 8 streams?\par
\b0      - The filter() method in Java 8 streams is used to filter out elements from a stream based on a specified condition.\par
\par
\b Q.26 What is the use of the reduce() method in Java 8 streams?\b0\par
     - The reduce() method in Java 8 streams is used to combine all the elements in a stream into a single result.\par
\par
\b Q.27 What is the use of the collect() method in Java 8 streams?\b0\par
     - The collect() method in Java 8 streams is used to collect the elements in a stream into a specified data structure.\par
\par
\b Q.28 What is the use of the flatMap() method in Java 8 streams?\b0\par
     - The flatMap() method in Java 8 streams is used to flatten a stream of streams into a single stream.\par
\par
\b Q.29 What is the use of the peek() method in Java 8 streams?\b0\par
     - The peek() method in Java 8 streams is used to perform an operation on each element in a stream without modifying the stream.\par
\par
\b Q.30 What is the use of the sorted() method in Java 8 streams?\b0\par
     - The sorted() method in Java 8 streams is used to sort the elements in a stream.\par
\par
\b Q.31 What is the use of the distinct() method in Java 8 streams?\b0\par
     - The distinct() method in Java 8 streams is used to remove duplicate elements from a stream.\par
\par
\b Q.32 What is the use of the skip() method in Java 8 streams?\b0\par
     - The skip() method in Java 8 streams is used to skip a specified number of elements in a stream.\par
\par
\b Q.33 What is the use of the limit() method in Java 8 streams?\b0\par
     - The limit() method in Java 8 streams is used to limit the number of elements in a stream to a specified number.\par
\par
\b Q.34 What is the use of the parallel() method in Java 8 streams?\b0\par
     - The parallel() method in Java 8 streams is used to process the elements in a stream in parallel.\par
\par
\b Q.35 What is the use of the sequential() method in Java 8 streams?\b0\par
     - The sequential() method in Java 8 streams is used to process the elements in a stream in a sequential manner.\par
\par
\b Q.36 What is the use of the allMatch() method in Java 8 streams?\b0\par
     - The allMatch() method in Java 8 streams is used to check if all the elements in a stream satisfy a specified condition.\par
\b\par
Q.37 What is the use of the anyMatch() method in Java 8 streams?\par
\b0      - The anyMatch() method in Java 8 streams is used to check if any of the elements in a stream satisfy a specified condition.\par
\par
\b Q.38 What is the use of the noneMatch() method in Java 8 streams?\b0\par
     - The noneMatch() method in Java 8 streams is used to check if none of the elements in a stream satisfy a specified condition.\par
\par
\b Q.39 What is the use of the findFirst() method in Java 8 streams?\b0\par
     - The findFirst() method in Java 8 streams is used to return the first element in a stream that satisfies a specified condition.\par
\par
\b Q.40 What is the use of the findAny() method in Java 8 streams?\b0\par
     - The findAny() method in Java 8 streams is used to return any element in a stream that satisfies a specified condition.\par
\par
\b Q.41 What is the use of the count() method in Java 8 streams?\b0\par
     - The count() method in Java 8 streams is used to return the number of elements in a stream.\par
\par
\b Q.42 What is the use of the toArray() method in Java 8 streams?\b0\par
     - The toArray() method in Java 8 streams is used to convert a stream into an array.\par
\par
\b Q.43 What is the use of the parallelStream() method in Java 8?\b0\par
     - The parallelStream() method in Java 8 is used to create a parallel stream.\par
\par
\b Q.44 What is the use of the sequentialStream() method in Java 8?\b0\par
     - The sequentialStream() method in Java 8 is used to create a sequential stream.\par
\par
\b Q.45 What is the use of the flatMapToInt() method in Java 8 streams?\b0\par
     - The flatMapToInt() method in Java 8 streams is used to flatten a stream of streams into a single stream of integers.\par
\par
\b Q.46 What is the use of the flatMapToLong() method in Java 8 streams?\b0\par
     - The flatMapToLong() method in Java 8 streams is used to flatten a stream of streams into a single stream of longs.\par
\par
\b Q.47 What is the use of the flatMapToDouble() method in Java 8 streams?\b0\par
     - The flatMapToDouble() method in Java 8 streams is used to flatten a stream of streams into a single stream of doubles.\par
\par
\b Q.48 Why was lambda expression introduced in Java 8?\b0\par
     - Lambda expressions were introduced in Java 8 to provide a concise and functional way of implementing interfaces with a single abstract method,\par
       also known as functional interfaces. Lambda expressions allow developers to write code that is more concise and expressive.\par
\par
\b Q.49 Why was the purpose of forEach() method added to the Iterable interface in Java 8?\b0\par
     - The forEach() method was added to the Iterable interface in Java 8 to provide a simple and concise way of iterating over collections.\par
       The forEach() method allows developers to write code that is more readable and expressive.\par
\par
\b Q.50 Why was the default method introduced in Java 8 interfaces?\b0\par
     - The default method was introduced in Java 8 interfaces to provide a way to add new methods to existing interfaces without breaking backwards compatibility.\par
       Default methods provide a way to extend the functionality of interfaces in a safe way.\par
\par
\b Q.51 Why was the Date and Time API introduced in Java 8?\b0\par
     - The Date and Time API was introduced in Java 8 to provide a more robust and flexible way of handling dates and times.\par
       The new API allows developers to handle dates and times in an easier way.\par
\par
\b Q.52 Why was the reduce() method added to the Stream interface in Java 8?\b0\par
     - The reduce() method was added to the Stream interface in Java 8 to provide a way of reducing a collection of data to a single value.\par
       The reduce() method allows developers to perform complex operations on data in a simple and efficient way.\par
\par
\b Q.53 Why was the parallel processing introduced in Java 8?\b0\par
     - Parallel processing was introduced in Java 8 to provide a way to take advantage of multi-core processors.\par
       Parallel processing allows developers to perform complex operations on data in a faster and more efficient way.\par
\par
\b Q.54 Why is the purpose of Spliterator interface in Java 8?\b0\par
     - The Spliterator interface was introduced in Java 8 to provide a way to split a collection of data into smaller parts.\par
       The Spliterator interface allows developers to process large collections of data in a more efficient way.\par
\par
\b Q.55 Why is the purpose of  BiFunction interface introduced in Java 8?\b0\par
     - The BiFunction interface was introduced in Java 8 to allow a way of passing two arguments at a time to a function and returning a result. \par
       The BiFunction interface allows developers to write code that is more expressive and concise.\par
\par
\b Q.56 Why was the CompletableFuture class introduced in Java 8?\b0\par
     - The CompletableFuture class was introduced in Java 8 to provide a way of performing asynchronous operations.\par
       The CompletableFuture class allows developers to write code that is more responsive and efficient.\par
\par
\b Q.57 Why was the groupingBy() method added to the Collectors class in Java 8?\b0\par
     - The groupingBy() method was added to the Collectors class in Java 8 to provide a way of grouping elements based on a certain criteria.\par
       The groupingBy() method allows developers to process collections of data in a more flexible and efficient way.\par
\par
\b Q.58 Why was the toArray() method added to the Stream interface in Java 8?\b0\par
      - The toArray() method was added to the Stream interface in Java 8 to provide a way of converting a stream into an array. \par
        The toArray() method allows developers to process collections of data in a more flexible and efficient way.\par
\par
\b Q.59 Why is the java.util.function package important in Java 8? \b0\par
      - The java.util.Function package is important in Java 8 because it offers a flavor of functional programming as a set of functional interfaces\par
        that can be used with lambda expressions. The java.util.function package allows developers to write code that is more expressive and concise.\par
\par
\b Q.60 Why was the peek() method added to the Stream API in Java 8?\b0\par
      - The peek() method was added to the Stream API in Java 8 to allow developers to debug and understand their code more easily.\par
\par
\b Q.61 Why was the Optional class introduced in Java 8?\b0\par
      - The Optional class was introduced in Java 8 to provide a way of handling null values in a more concise and expressive way. \par
        The Optional class allows developers to write code that is more robust and bug-free.\par
\par
\b Q.62 Why was the trySplit() method added to the Spliterator interface in Java 8?\b0\par
      - The trySplit() method was added to the Spliterator interface in Java 8 to provide a way of splitting a collection of data into two separate streams.\par
        The trySplit() method allows developers to write code that is more flexible and efficient.\par
\par
\b Q.63 Why was the min() and max() methods added to the Stream interface in Java 8?\b0\par
      - The min() and max() methods were added to the Stream interface in Java 8 to provide an easy way of finding the minimum and maximum values in a collection of data.\par
\par
\b Q.64 Why is the purpose of getOrDefault() method added to the Map interface in Java 8?\b0\par
      - The getOrDefault() method was added to the Map interface in Java 8 to provide a way of getting a value from a map with a default value if the key is not found.\par
\par
\b Q.65 Why was the computeIfAbsent() method added to the Map interface in Java 8?\b0\par
      - The computeIfAbsent() method was added to the Map interface in Java 8 to provide a way of getting a value from a map and \par
        computing a new value if the key is not found.\par
\par
\b Q.66 Why was the takeWhile() method added to the Stream interface in Java 8?\b0\par
      - The takeWhile() method was added to the Stream interface in Java 8 to provide a way of selecting elements from a stream until a certain condition is met.\par
\par
\b Q.67 Why was the dropWhile() method added to the Stream interface in Java 8?\b0\par
      - The dropWhile() method was added to the Stream interface in Java 8 to provide a way of selecting elements from a stream after a certain condition is met.\par
\par
\b Q.68 Why was the or() method added to the Predicate interface in Java 8?\b0\par
      - The or() method was added to the Predicate interface in Java 8 to provide a way of combining multiple predicates into a single predicate.\par
        It acts as a short-circuiting logical OR of this predicate and another.\par
\par
\b Q.69 Why was the and() method added to the Predicate interface in Java 8?\b0\par
      - The and() method was added to the Predicate interface in Java 8 to provide a way of combining multiple predicates into a single predicate.\par
        It acts as a short-circuiting logical AND of this predicate and another.\par
\par
\b Q.70 Why was the asDoubleStream() method added to the IntStream interface in Java 8?\b0\par
      - The asDoubleStream() method was added to the IntStream interface in Java 8 to provide a way of converting an IntStream to a DoubleStream.\par
\par
\b Q.71 Why was the asLongStream() method added to the IntStream interface in Java 8?\b0\par
      - The asLongStream() method was added to the IntStream interface in Java 8 to provide a way of converting an IntStream to a LongStream.\par
\par
\b Q.72 Why was the ofNullable() method added to the Optional class in Java 8?\b0\par
      - The ofNullable() method was added to the Optional class in Java 8 to provide a way of creating an Optional object with a null value.\par
        The ofNullable() method is used to get an instance of the Optional class with a specified value. If the value is null, then an empty Optional object is returned.\par
\par
\b Q.73 Why was the flatMapToInt() method added to the Stream interface in Java 8?\b0\par
      - The flatMapToInt() method was added to the Stream interface in Java 8 to provide a way of flattening a stream of objects to an IntStream.\par
\par
\b Q.74 Why was the toMap() method added to the Collectors class in Java 8?\b0\par
      - The toMap() method was added to the Collectors class in Java 8 to provide a way of collecting a stream of objects to a Map object.\par
\par
\b Q.75 Why was the of() method added to the Optional class in Java 8?\b0\par
      - The of() method was added to the Optional class in Java 8 to provide a way of creating an Optional object. \par
        It will return an Optional object containing the given value if the value is non-null, or an empty Optional object if the value is null.\par
\par
}
 